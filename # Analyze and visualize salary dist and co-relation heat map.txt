# Analyze and visualize salary distribution by location for top N locations

if 'location' in df.columns and ('min_salary' in df.columns or 'max_salary' in df.columns or 'med_salary' in df.columns):
    top_n_locations = 10 # Use the same N as before

    # Get the top N locations
    top_locations = df['location'].value_counts().nlargest(top_n_locations).index.tolist()

    # Filter the DataFrame to include only the top locations and relevant salary columns
    salary_cols = ['min_salary', 'med_salary', 'max_salary']
    available_salary_cols = [col for col in salary_cols if col in df.columns]

    if available_salary_cols:
        df_top_locations_salary = df[df['location'].isin(top_locations)].copy()

        # Calculate average of available salary columns for each location
        # Handle cases where only one salary column is available
        if len(available_salary_cols) > 1:
            location_salary_stats = df_top_locations_salary.groupby('location')[available_salary_cols].mean().reset_index()
        elif len(available_salary_cols) == 1:
             location_salary_stats = df_top_locations_salary.groupby('location')[available_salary_cols[0]].mean().reset_index()
             location_salary_stats = location_salary_stats.rename(columns={available_salary_cols[0]: 'average_salary'})


        if not location_salary_stats.empty:
            # Melt the DataFrame for easier plotting with seaborn
            if len(available_salary_cols) > 1:
                location_salary_melted = location_salary_stats.melt(id_vars='location',
                                                                   value_vars=available_salary_cols,
                                                                   var_name='salary_type',
                                                                   value_name='average_salary')
            elif len(available_salary_cols) == 1:
                 location_salary_melted = location_salary_stats.melt(id_vars='location',
                                                                    value_vars=['average_salary'],
                                                                    var_name='salary_type',
                                                                    value_name='average_salary')


            plt.figure(figsize=(14, 7))
            sns.barplot(data=location_salary_melted, x='average_salary', y='location', hue='salary_type', palette='viridis', order=top_locations)
            plt.title(f'Average Salary by Type in Top {top_n_locations} Locations')
            plt.xlabel('Average Salary')
            plt.ylabel('Location')
            plt.tight_layout()
            plt.show()
        else:
            print("No salary data available for the top locations.")
    else:
        print("No valid salary columns found ('min_salary', 'max_salary', or 'med_salary').")

else:
    print("Cannot plot salary distribution by location (location column or salary columns missing).")

#  Correlation heatmap
# Select only numerical columns for the correlation matrix
numerical_df = df.select_dtypes(include=[np.number])

if not numerical_df.empty:
    plt.figure(figsize=(10, 8))
    sns.heatmap(numerical_df.corr(), annot=True, cmap='coolwarm', fmt=".2f", vmin = -1, vmax = 1)
    plt.title('Correlation Heatmap of Numerical Features')
    plt.tight_layout()
    plt.show()
else:
    print("No numerical columns found for the correlation heatmap.")